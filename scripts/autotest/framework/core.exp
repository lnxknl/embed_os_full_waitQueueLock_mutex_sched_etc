package provide autotest 1.0

namespace eval ::autotest {
	namespace export TEST_SETUP_HOST TEST_TEARDOWN_HOST \
		TEST_SETUP_TARGET TEST_TEARDOWN_TARGET \
		TEST_CASE \
		TEST_CASE_DECLARE_FIXME

	namespace export test_expect_strings
	namespace export test_expect_strings_timeout
	namespace export test_exec_embox_cmd
	namespace export test_exec_embox_cmd_timeout

	namespace export target_connect
	namespace export target_disconnect
	namespace export target_wait_until_ready

	variable embox_prompt
	variable embox_ip
	variable host_ip
}

set connection_type     $env(TEST_TARGET_CONNECTION_TYPE)
source [file join [file dirname [info script]] target_$connection_type.exp]
source [file join [file dirname [info script]] cmd.exp]

# This variable is used to show that current test case is broken
# currently. That is, test case is correct, but Embox errored while
# running this test case because of some Embox's bugs.
set current_test_case_fixme false

proc ::autotest::TEST_SETUP_HOST {setup_body} {
	eval $setup_body
}

proc ::autotest::TEST_TEARDOWN_HOST {teardown_body} {
	eval $teardown_body
}

proc ::autotest::TEST_SETUP_TARGET {setup_body} {
	target_connect
	eval $setup_body
	target_disconnect
}

proc ::autotest::TEST_TEARDOWN_TARGET {teardown_body} {
	target_connect
	eval $teardown_body
	target_disconnect
}

proc ::autotest::TEST_CASE_DECLARE_FIXME {test_case_body} {
	global current_test_case_fixme

	set current_test_case_fixme true
	eval $test_case_body
	set current_test_case_fixme false
}

proc test_exec {test_body} {
	eval $test_body
	return 0
}

proc ::autotest::TEST_CASE {test_name test_body} {
	global embox_ip
	global current_test_case_fixme

	# Do not execute test if it marked with TEST_CASE_DECLARE_FIXME
	if {$current_test_case_fixme == true} {
		set result_str "    FIXME: TEST CASE \"$test_name\" is known to be broken"
		puts $result_str
		return
	}

	puts "    TEST CASE \"$test_name\" running ..."
	
	# Execute test
	set res [test_exec $test_body]

	if {$res != 0} {
		puts "    TEST CASE \"$test_name\" ERROR"
		exit 1
	} else {
		puts "    TEST CASE \"$test_name\" OK"
	}
}

namespace import autotest::*

set testsuite    [lindex $::argv 0]
set test         [lindex $::argv 1]
set embox_ip     $env(EMBOX_IP)
set host_ip      $env(HOST_IP)
set embox_prompt $env(EMBOX_PROMPT)

# Wait until Embox starts
target_wait_until_ready

cd $testsuite
source setup.exp

cd $test
source test.exp

cd $testsuite
source finish.exp

exit 0
